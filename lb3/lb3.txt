1)
#include <stdio.h>
#include <math.h>
#include <sys/resource.h>
void main(int argc, char* argv[])
 {
  int m, n, pid;
  m=5000;
  n=1;
  pid = fork();
  if(pid == -1)
  { 
	perror("fork error");
	exit(1);
  }
  printf("pid=%i\n",pid);
  if(pid != 0)
  {
	int j;
	for(j = 1; j <= 1000; j++)
	{
	  m-=1;
	}
	printf("родитель: %i\n\n",m);
  }
  else
  {
	int i;
	for(i = 1; i <= 1000; i++)
	{
	  n+=1;
	}
	printf("потомок: %d\n\n",n);
	}
  printf("Программа завершена\n");
  exit(1);
  }
Вывод:
pid=10039
родитель: 4000
Программа завершена
pid=0
потомок: 1001
Программа завершена

2)
#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/resource.h>
void main(int argc, char* argv[])
 {
 int m, pid;
 m=0;
 pid = fork();

 if(pid == -1)
 {
        perror("fork error");
        exit(1);
 }
 printf("pid=%i\n",pid);
 if(pid != 0)
 {
          m--;

        printf("родитель: %i\n\n",m);
 }
 else
 {

        m++;
        printf("потомок: %d\n\n",m);
 }
 printf("Программа завершена\n");
 exit(1);
}
Вывод:
pid=5374
родитель: -1

Программа завершена
pid=0
потомок: 1

Программа завершена

3)
#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/resource.h>
void main(int argc, char* argv[])
 {
 int m, n, pid;
 m=5000;
 pid = fork();
 if(pid == -1)
 {
        perror("fork error");
        exit(1);
 }
 printf("pid=%i\n",pid);
 while(1){
 if(pid != 0)
 {
        int j;

        sleep(1);
         m-=1;
        printf("родитель: %i\n\n",m);
 }
 
 else
 {
       
         sleep(1);
          m+=1;
        printf("потомок: %d\n\n",m);
  
 }
 printf("Программа завершена\n");
 exit(1);
}
Вывод:
pid=5318
pid=0
потомок: 5001

родитель: 4999

потомок: 5002

родитель: 4998

потомок: 5003

родитель: 4997

потомок: 5004

родитель: 4996


.............

4)
#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/resource.h>
void main(int argc, char* argv[])
 {
 int m, n, pid;
 m=5000;
 n=1;
 pid = fork();
 if(pid == -1)
 {
        perror("fork error");
        exit(1);
 }
 printf("pid=%i\n",pid);
 while(1){
 if(pid == 0)
 {
        int j;

        sleep(1);
         m-=1;
        printf("родитель: %i\n\n",m);
 }
 
 else
 {
       
         sleep(1);
          n+=1;
        printf("потомок: %d\n\n",n);
  
 }
 }
 printf("Программа завершена\n");
 exit(1);
}
Вывод:
pid=3016
pid=0
родитель: 4999

потомок: 2

родитель: 4998

потомок: 3

родитель: 4997

потомок: 4

родитель: 4996

потомок: 5
5)
Father.c:
#include <stdio.h>
#include <math.h>
#include <sys/resource.h>
#include <unistd.h>
int main()
{
int pid, ppid, status;
pid=getpid();
ppid=getppid();
printf("\n\nFATHER PARAM: pid=%i ppid=%i\n", pid,ppid);
if(fork()==0){
execl("son","son", NULL);
}
wait(&status);
system("ps -a");
printf("\n\nChild proccess is finished with status %d\n\n", status);
return 0;
}
Son.c:
#include <stdio.h>
#include <math.h>
#include <sys/resource.h>
#include <unistd.h>
int main()
{
int pid,ppid;
pid=getpid();
ppid=getppid();
printf("\n\nSON PARAMS: pid=%i ppid=%i\n\n",pid,ppid);
sleep(1);
system("ps -a -o uid,pid,ppid,pgid,time,cmd");
//exit(1); статус завершения 256
return 0; // статус завершения 0
}
6)Вывод:
FATHER PARAM: pid=3460 ppid=3171


SON PARAMS: pid=3461 ppid=3460

  UID     PID    PPID    PGID     TIME CMD
 1000    1737    1735    1735 00:00:46 /usr/lib/xorg/Xorg vt2 -displayfd 3 -auth /run/user/1000/gdm/Xauthority -background none -noreset -keeptty -verbose 3
 1000    1763    1735    1735 00:00:00 /usr/libexec/gnome-session-binary --systemd --systemd --session=ubuntu
 1000    3460    3171    3460 00:00:00 ./Father
 1000    3461    3460    3460 00:00:00 son
 1000    3462    3461    3460 00:00:00 sh -c ps -a -o uid,pid,ppid,pgid,time,cmd
 1000    3463    3462    3460 00:00:00 ps -a -o uid,pid,ppid,pgid,time,cmd
    PID TTY          TIME CMD
   1737 tty2     00:00:46 Xorg
   1763 tty2     00:00:00 gnome-session-b
   3460 pts/0    00:00:00 Father
   3464 pts/0    00:00:00 sh
   3465 pts/0    00:00:00 ps


Child proccess is finished with status 0
7)
    PID TTY      STAT   TIME COMMAND
   1735 tty2     Ssl+   0:00 /usr/lib/gdm3/gdm-x-session --run-script env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --systemd --session=ubuntu
   1737 tty2     Sl+    1:13  \_ /usr/lib/xorg/Xorg vt2 -displayfd 3 -auth /run/user/1000/gdm/Xauthority -background none -noreset -keeptty -verbose 3
   1763 tty2     Sl+    0:00  \_ /usr/libexec/gnome-session-binary --systemd --systemd --session=ubuntu
   1830 ?        Ss     0:00      \_ /usr/bin/ssh-agent /usr/bin/im-launch env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --systemd --session=ubuntu
   1653 ?        Sl     0:00 /usr/bin/gnome-keyring-daemon --daemonize --login
   1639 ?        Ss     0:00 /lib/systemd/systemd --user
   1640 ?        S      0:00  \_ (sd-pam)
   1645 ?        S<sl   0:00  \_ /usr/bin/pulseaudio --daemonize=no --log-target=journal
   1647 ?        SNsl   0:00  \_ /usr/libexec/tracker-miner-fs
   1651 ?        Ss     0:00  \_ /usr/bin/dbus-daemon --session --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only
   1671 ?        Ssl    0:00  \_ /usr/libexec/gvfsd
   2043 ?        Sl     0:00  |   \_ /usr/libexec/gvfsd-trash --spawner :1.3 /org/gtk/gvfs/exec_spaw/0
   1676 ?        Sl     0:00  \_ /usr/libexec/gvfsd-fuse /run/user/1000/gvfs -f -o big_writes
   1684 ?        Ssl    0:00  \_ /usr/libexec/gvfs-udisks2-volume-monitor
   1691 ?        Ssl    0:00  \_ /usr/libexec/gvfs-gphoto2-volume-monitor
   1699 ?        Ssl    0:00  \_ /usr/libexec/gvfs-mtp-volume-monitor
   1703 ?        Ssl    0:00  \_ /usr/libexec/gvfs-goa-volume-monitor
   1707 ?        Sl     0:00  \_ /usr/libexec/goa-daemon
   1714 ?        Sl     0:00  \_ /usr/libexec/goa-identity-service
   1720 ?        Ssl    0:00  \_ /usr/libexec/gvfs-afc-volume-monitor
   1866 ?        Ssl    0:00  \_ /usr/libexec/at-spi-bus-launcher
   1871 ?        S      0:00  |   \_ /usr/bin/dbus-daemon --config-file=/usr/share/defaults/at-spi2/accessibility.conf --nofork --print-address 3
   1893 ?        Ssl    0:00  \_ /usr/libexec/gnome-session-ctl --monitor
   1900 ?        Ssl    0:00  \_ /usr/libexec/gnome-session-binary --systemd-service --session=ubuntu
   2108 ?        Sl     0:00  |   \_ /usr/libexec/gsd-disk-utility-notify
   2144 ?        Sl     0:00  |   \_ /usr/libexec/evolution-data-server/evolution-alarm-notify
   2452 ?        Sl     0:00  |   \_ update-notifier
   1914 ?        Ssl    1:01  \_ /usr/bin/gnome-shell
   1955 ?        Sl     0:00  |   \_ ibus-daemon --panel disable --xim
   1959 ?        Sl     0:00  |       \_ /usr/libexec/ibus-dconf
   1960 ?        Sl     0:00  |       \_ /usr/libexec/ibus-extension-gtk3
   2148 ?        Sl     0:00  |       \_ /usr/libexec/ibus-engine-simple
   1962 ?        Sl     0:00  \_ /usr/libexec/ibus-x11 --kill-daemon
   1964 ?        Sl     0:00  \_ /usr/libexec/ibus-portal
   1977 ?        Sl     0:00  \_ /usr/libexec/at-spi2-registryd --use-gnome-session
   1981 ?        Ssl    0:00  \_ /usr/libexec/xdg-permission-store
   1983 ?        Sl     0:00  \_ /usr/libexec/gnome-shell-calendar-server
   1992 ?        Ssl    0:00  \_ /usr/libexec/evolution-source-registry
   2001 ?        Ssl    0:00  \_ /usr/libexec/evolution-calendar-factory
   2005 ?        Sl     0:00  \_ /usr/libexec/dconf-service
   2014 ?        Ssl    0:00  \_ /usr/libexec/evolution-addressbook-factory
   2031 ?        Sl     0:00  \_ /usr/bin/gjs /usr/share/gnome-shell/org.gnome.Shell.Notifications
   2056 ?        Ssl    0:00  \_ /usr/libexec/gsd-a11y-settings
   2058 ?        Ssl    0:00  \_ /usr/libexec/gsd-color
   2060 ?        Ssl    0:00  \_ /usr/libexec/gsd-datetime
   2063 ?        Ssl    0:00  \_ /usr/libexec/gsd-housekeeping
   2065 ?        Ssl    0:00  \_ /usr/libexec/gsd-keyboard
   2067 ?        Ssl    0:00  \_ /usr/libexec/gsd-media-keys
   2070 ?        Ssl    0:00  \_ /usr/libexec/gsd-power
   2072 ?        Ssl    0:00  \_ /usr/libexec/gsd-print-notifications
   2075 ?        Ssl    0:00  \_ /usr/libexec/gsd-rfkill
   2076 ?        Ssl    0:00  \_ /usr/libexec/gsd-screensaver-proxy
   2078 ?        Ssl    0:00  \_ /usr/libexec/gsd-sharing
   2080 ?        Ssl    0:00  \_ /usr/libexec/gsd-smartcard
   2084 ?        Ssl    0:00  \_ /usr/libexec/gsd-sound
   2086 ?        Ssl    0:00  \_ /usr/libexec/gsd-usb-protection
   2089 ?        Ssl    0:00  \_ /usr/libexec/gsd-wacom
   2090 ?        Ssl    0:00  \_ /usr/libexec/gsd-wwan
   2092 ?        Ssl    0:00  \_ /usr/libexec/gsd-xsettings
   2147 ?        Sl     0:00  \_ /usr/libexec/gsd-printer
   2165 ?        Sl     0:03  \_ /snap/snap-store/638/usr/bin/snap-store --gapplication-service
   2213 ?        Ssl    0:00  \_ /usr/libexec/xdg-document-portal
   2331 ?        Ssl    0:00  \_ /usr/libexec/xdg-desktop-portal
   2335 ?        Ssl    0:00  \_ /usr/libexec/xdg-desktop-portal-gtk
   2391 ?        Sl     0:06  \_ /usr/bin/nautilus --gapplication-service
   2450 ?        Ssl    0:00  \_ /usr/libexec/gvfsd-metadata
   2765 ?        Sl     0:13  \_ evince /home/lendor/Ос3?аба.pdf
   2771 ?        Sl     0:00  \_ /usr/libexec/evinced
   2829 ?        Sl     0:25  \_ /usr/bin/gedit --gapplication-service
   3163 ?        Ssl    0:15  \_ /usr/libexec/gnome-terminal-server
   3171 pts/0    Ss+    0:00  |   \_ bash
   3696 pts/0    S      0:00  |   |   \_ ./Father
   3700 pts/0    S      0:00  |   |       \_ sh -c ps -xf > file.txt
   3701 pts/0    R      0:00  |   |           \_ ps -xf
   3531 pts/1    Ss+    0:00  |   \_ bash
   3659 ?        Ssl    0:00  \_ /usr/libexec/tracker-store
   
   
 8)
 Функция exec() (execute) загружает и запускает другую программу. Таким образом, новая программа полностью замещает текущий процесс. Новая программа начинает свое выполнение с функции main. Все файлы вызывающей программы остаются открытыми. Они также являются доступными новой программе. Используется шесть различных вариантов функций exec.

Суффиксы l, v, p, e в именах функций определяют формат и объем аргументов, а также каталоги, в которых нужно искать загружаемую программу:

l (список). Аргументы командной строки передаются в форме списка arg0, arg1.... argn, NULL. Эту форму используют, если количество аргументов известно;
v (vector). Аргументы командной строки передаются в форме вектора argv[]. Отдельные аргументы адресуются через argv [0], argv [1]... argv [n]. Последний аргумент (argv [n]) должен быть указателем NULL;
p (path). Обозначенный по имени файл ищется не только в текущем каталоге, но и в каталогах, определенных переменной среды PATH;
e (среда). Функция ожидает список переменных среды в виде вектора (envp []) и не использует текущей среды.
exec1.c:
#include <unistd.h>

#include <stdio.h>

int main (void)

{

if (!fork ()) {

execl ("/bin/echo", "echo", "child", NULL);

fprintf (stderr, "an error occured\n");

return 1;

}

return 0;

}

exec2.c:

#include <unistd.h>

#include <stdio.h>

int main (void)

{

if (!fork ()) {

execlp ("echo", "echo", "child", NULL);

fprintf (stderr, "an error occured\n");

return 1;

}

return 0;

}

exec3.c:

#include <unistd.h>

#include <stdio.h>

extern char ** environ;

int main (void)

{

if (!fork ()) {

execle ("/bin/echo", "echo", "child", NULL, environ);

fprintf (stderr, "an error occured\n");

return 1;

}

return 0;

}


exec4.c:

#include <unistd.h>

#include <stdio.h>

int main (void)

{

char * echo_args[] = { "echo", "child", NULL };

if (!fork ()) {

execv ("/bin/echo", echo_args);

fprintf (stderr, "an error occured\n");

return 1;

}

return 0;

}

exec5.c:

#include <unistd.h>

#include <stdio.h>

int main (void)

{

char * echo_args[] = { "echo", "child", NULL };

if (!fork ()) {

execvp ("echo", echo_args);

fprintf (stderr, "an error occured\n");

return 1;

}

return 0;

}
9)

Выполнение
порождающего процесса может быть приостановлено до завершения
потомка системным вызовом wait. Системный вызов wait возвращает
родителю идентификатор того потомка, который завершился первым
после последнего обращения к wait . Если у родителя несколько
потомков, то чтобы узнать о завершении каждого из них, нужно
выполнить несколько системных вызовов wait с проверкой их
возвращаемых значений. Если процесс не имеет потомков, wait
возвращает код (-1).

Системный вызов waitpid() блокирует выполнение текущего
процесса до тех пор, пока либо не завершится порожденный им
процесс, определяемый значением параметра pid, либо пока текущий
процесс не получит сигнал, для которого установлена реакция по
умолчанию "завершить процесс" или реакция обработки
пользовательской функцией. Если порожденный процесс, заданный
параметром pid, уже в стадии завершения к моменту системного
вызова управление немедленно возвращается без блокирования
текущего процесса.
Параметр pid определяет порожденный процесс, завершения которого
дожидается процесс-родитель, следующим образом:
- если pid > 0 ожидаем завершения процесса с идентификатором pid;
- если pid = 0, то ожидаем завершения любого порожденного процесса
в группе, к которой принадлежит процесс-родитель;
- если pid = -1, то ожидаем завершения любого порожденного
процесса;
- если pid < 0, но не (-1), то ожидаем завершения любого
порожденного процесса из группы, идентификатор которой равен
абсолютному значению параметра pid.


Father1.c:

#include <stdio.h>
#include <sys/types.h>
#include <wait.h>
#include <unistd.h>
int main()
{
int i, pid[4], ppid, status, result;
pid[0]=getpid();
ppid=getppid();
printf("\nFATHER PARAMS: pid=%i ppid=%i\n", pid[0],ppid);
if((pid[1] = fork()) == 0)
execl("son1", "son1", NULL);
if((pid[2] = fork()) == 0)
execl("son2", "son2", NULL);
if((pid[3] = fork()) == 0)
execl("son3", "son3", NULL);
system("ps xf > file.txt");
for (i = 1; i < 4; i++)
{
result = waitpid(pid[i], &status, WUNTRACED);
printf("\n%d) Child proccess with pid = %d is finished with status %d\n", i,
result, status);
}
return 0;
}
Вывод:

FATHER PARAMS: pid=6613 ppid=4655

SON PARAMS: pid=6615 ppid=6613


SON PARAMS: pid=6616 ppid=6613
SON PARAMS: pid=6614 ppid=6613

1) Child proccess with pid = 6614 is finished with status 0

2) Child proccess with pid = 6615 is finished with status 256

3) Child proccess with pid = 6616 is finished with status 65280

Father2.c:

#include <stdio.h>
#include <sys/types.h>
#include <wait.h>
#include <string.h>
#include <unistd.h>
int main()
{
int i, ppid, pid[4], status[3], result[3];
char *son[] = {"son1", "son2", "son3"};
int option[] = {WNOHANG, WUNTRACED, WNOHANG};
// здесь можно задавать различные флаги исполнения
pid[4] = getpid();
ppid = getppid();
printf("FATHER PARAMS: pid=%i ppid=%i\n", pid[3],ppid);
for (i = 0; i < 3; i++)
if((pid[i] = fork()) == 0)
execl(son[i], son[i], NULL);
system("ps xf > file.txt");
for (i = 0; i < 3; i++)
{
result[i] = waitpid(pid[i], &status[i], option[i]);
printf("%d) Child with pid = %d is finished with status %d\n", (1 +
i), result[i], status[i]);
}
for(i = 0; i < 3; i++)
if (WIFEXITED(status[i]) == 0)
printf("Proccess pid = %d was failed.\n", pid[i]);
else
printf("Proccess pid = %d was success.\n", pid[i]);
return 0;
}

Вывод:

FATHER PARAMS: pid=22070 ppid=4655

SON PARAMS: pid=6706 ppid=6704

SON PARAMS: pid=6710 ppid=6705


SON PARAMS: pid=6707 ppid=6704
SON PARAMS: pid=6708 ppid=6705
1) Child with pid = 0 is finished with status 0
1) Child with pid = 0 is finished with status 0
2) Child with pid = 6706 is finished with status 256
2) Child with pid = 6708 is finished with status 256
3) Child with pid = 6707 is finished with status 65280
Proccess pid = 6705 was success.
Proccess pid = 6706 was success.
Proccess pid = 6707 was success.
3) Child with pid = 6710 is finished with status 65280
Proccess pid = 0 was success.
Proccess pid = 6708 was success.
Proccess pid = 6710 was success.

